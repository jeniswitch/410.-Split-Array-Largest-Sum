Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

public class Solution {
    public bool SearchMatrix(int[][] matrix, int target) {
        int first = 0;
        int m = matrix.Length, n = matrix[0].Length;
        int last = m * n;
        while(first < last) {
            int mid = first + (last - first) / 2;
            int num = matrix[mid / n][mid % n];
            if(num == target) {
                return true;
            }
            else if(num > target) {
                last = mid;
            }
            else {
                first = mid + 1;
            }
        }
        return false;
    }
}
