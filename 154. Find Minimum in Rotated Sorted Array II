Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

public class Solution {
    public int FindMin(int[] nums) {
        int mid = 0;
        int start = 0;
        int end = nums.Length - 1;
        while(start < end) {
            mid = start + (end - start) / 2;
            if(nums[mid] < nums[end]) {
                end = mid;
            }
            else if(nums[mid] > nums[end]) {
                start = mid + 1;
            }
            else {
               end--;
            }
        }
        return nums[start];
    }
}
