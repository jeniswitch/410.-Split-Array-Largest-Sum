class Solution {
    public int minimumHammingDistance(int[] source, int[] target, int[][] allowedSwaps) {
        int n = allowedSwaps.length;
        int[] p = new int[source.length];
        for(int i = 0; i < source.length; i++) {
            p[i] = i;
        }
        for(int i = 0; i < n; i++) {
            int a = allowedSwaps[i][0];
            int b = allowedSwaps[i][1];
            int pa = find(a, p), pb = find(b, p);
            if(pa != pb) {
                p[pa] = pb;
            }
        }
        HashMap<Integer, HashMap<Integer, Integer>> map = new HashMap<>();
        for(int i = 0; i < source.length; i++) {
            int num = source[i];
            int root = find(i, p);
            map.putIfAbsent(root, new HashMap<Integer, Integer>());
            HashMap<Integer, Integer> m = map.get(root);
            m.put(num, m.getOrDefault(num, 0) + 1);
        }
        int res = 0;
        for(int i = 0; i < target.length; i++) {
            int num = target[i];
            int root = find(i, p);
            HashMap<Integer, Integer> m = map.get(root);
            if(m.getOrDefault(num, 0) == 0) res++;
            else m.put(num, m.get(num) - 1);
        }
        return res;
    }
    private int find(int x, int[] p) {
        if(x != p[x]) p[x] = find(p[x], p);
        return p[x];
    }
}
