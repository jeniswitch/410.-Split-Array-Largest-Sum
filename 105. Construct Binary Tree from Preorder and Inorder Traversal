Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    private Dictionary<int, int> map;
    private int pindex = 0;
    public TreeNode BuildTree(int[] preorder, int[] inorder) {
        map = new Dictionary<int, int>();
        for(int i = 0; i < inorder.Length; i++) {
            map.Add(inorder[i], i);
        }
        return Helper(preorder, 0, inorder.Length - 1);
    }
    private TreeNode Helper(int[] preorder, int istart, int iend) {
        if(istart > iend) {
            return null;
        }
        
        TreeNode root = new TreeNode(preorder[pindex++]);
        int iindex = map[root.val];
        root.left = Helper(preorder, istart , iindex - 1);
        root.right = Helper(preorder, iindex + 1, iend);
        return root;
    }
}
