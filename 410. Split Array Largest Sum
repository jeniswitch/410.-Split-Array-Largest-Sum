Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.

Write an algorithm to minimize the largest sum among these m subarrays.

 

Example 1:

Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], m = 2
Output: 9
Example 3:

Input: nums = [1,4,4], m = 3
Output: 4

public class Solution {
    public int SplitArray(int[] nums, int m) {
        int l = 0, h = 0;
        for(int i = 0; i < nums.Length; i++) {
            h += nums[i];
            l = Math.Max(nums[i], l);
        }
        while(l < h) {
            int mid = l + (h - l) / 2;
            if(num_split(nums, mid) <= m) {
                h = mid;
            }
            else{
                l = mid + 1;
            }
        }
        return l;
    }
    private int num_split(int[] nums, int target) {
        int sum = 0, count = 1;
        for(int i = 0; i < nums.Length; i++) {
            sum += nums[i];
            if(sum > target) {
                count++;
                sum = nums[i];
            }
        }
        return count;
    }
}
